// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  employeeId String     @unique
  email     String?   @unique
  name      String?
  lastName  String?
  password  String?
  avatar    String?
  dateEmployment DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     UserRole[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     UserRole[]
  permissions RolePermission[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
  Role Role @relation(fields: [roleId], references: [id])
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     RolePermission[]
}

model RolePermission {
  id            Int      @id @default(autoincrement())
  roleId        Int
  permissionId  Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Role       Role       @relation(fields: [roleId], references: [id])
  Permission Permission @relation(fields: [permissionId], references: [id])
}

model Session {
  id          String   @id @default(cuid())
  expires     DateTime
  sessionData String   @db.Text()
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([expires]) // Index for the session garbage collector
}